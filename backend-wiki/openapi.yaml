openapi: 3.0.0
info:
  title: "ECN Backend"
  version: "0.0.1"
servers:
  - url: "http://localhost:8080"
    description: "Default local"
  - url: "http://ec2-3-139-67-13.us-east-2.compute.amazonaws.com:8080"
    description: "AWS"
components:
  securitySchemes:
    userAuth:
      type: apiKey
      name: "SessionToken"
      in: header
  schemas:
    response:
      type: object
      required: [success]
      properties:
        success:
          type: boolean
    userType:
      type: integer
      enum: [0, 1]
      description: "0 for patient, 1 for medic"
    idDoc:
      type: string
      description: "Represents a RG or CRM"
    appointmentStatus:
      type: integer
      enum: [0, 1]
      description: "0 for pending, 1 for done"
    isoDatetime:
      type: string
      description: "ISO encoded timestamp with delta timezone"
      example: "2021-03-18-14:30+00:00"
    failResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
          example: false
        cause:
          type: string
          example: "Fail cause"
    sample:
      type: object
      properties:
        sampleId:
          type: integer
        patientId:
          type: integer
        timestamp:
          type: integer
        raw:
          type: string
          description: "Base 64 encoded 1 byte precision samples"
          example: "bnYybjNyZnEzbmlmM2luaTMgZmkzaDRmajNmNA=="
    user:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        type:
          $ref: "#/components/schemas/userType"
        idDoc:
          $ref: "#/components/schemas/idDoc"
        state:
          type: string
          example: "CE"
        city:
          type: string
        district:
          type: string
        address:
          type: string
    session:
      type: object
      properties:
        token:
          type: string
          example: "jDsHd5ab9288JMv8ZXci8SMlZvURXMmGNb2e36udWKs="
        userId:
          type: integer
        expire:
          $ref: "#/components/schemas/isoDatetime"
    appointment:
      properties:
        appointmentId:
          type: integer
        medicId:
          type: integer
        patientId:
          type: integer
        status:
          $ref: "#/components/schemas/appointmentStatus"
        time:
          $ref: "#/components/schemas/isoDatetime"
paths:
  /sample/{sample_id}:
    get:
      summary: Get sample by id
      tags:
        - sample
      parameters:
        - name: sample_id
          in: path
          required: true
          schema:
           type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  success:
                    type: boolean
                  sample:
                    $ref: "#/components/schemas/sample"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /sample/all:
    get:
      summary: "Get all samples"
      description: "Can filter by patient"
      tags:
        - sample
      parameters:
        - name: patient_id
          in: query
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  samples:
                    type: array
                    items:
                      $ref: "#/components/schemas/sample"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /user/{user_id}/:
    get:
      summary: "Get user by id"
      tags:
        - user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  user:
                    $ref: "#/components/schemas/user"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /user/all:
    get:
      summary: "Get all users"
      description: "Can filter by type"
      tags:
        - user
      parameters:
        - name: type
          in: query
          schema:
            $ref: "#/components/schemas/userType"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/failResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /user:
    post:
      summary: "Adds a new user"
      tags: [user]
      requestBody:
        content:
          application/json:
            schema:
              allOf: [$ref: "#/components/schemas/user"]
              properties:
                password:
                  type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
        409:
          description: "Username or email already in use"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /user/has-user/{username}/{email}:
    get:
      summary: "Checks if the given username or emails are in use"
      tags: [user]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  exists:
                    type: boolean
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /session:
    post:
      summary: "Starts a new user session"
      tags: [session]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  session:
                    $ref: "#/components/schemas/session"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
        403:
          description: "Invalid username or passsword"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
    get:
      summary: "Gets the current session data"
      tags: [session]
      security:
        - userAuth: []
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  session:
                    $ref: "#/components/schemas/session"
        403:
          description: "Invalid session"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
    delete:
      summary: "Log out of the current session"
      tags: [session]
      security:
        - userAuth: []
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
        403:
          description: "Invalid session"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /appointment:
    post:
      summary: "Adds a new appointment"
      tags: [appointment]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                medicId:
                  type: integer
                patientId:
                  type: integer
                time:
                  $ref: "#/components/schemas/isoDatetime"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
        400:
          description: "Bad request, invalid patient or medic"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /appointment/{appointment_id}:
    delete:
      summary: "Deletes a appointment"
      tags: [appointment]
      parameters:
        - name: appointment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
    get:
      summary: "Deletes a appointment"
      tags: [appointment]
      parameters:
        - name: appointment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  appointment:
                    $ref: "#/components/schemas/appointment"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /appointment/all:
    get:
      summary: "List all appoinments"
      description: "Can also filter by patient and medic"
      tags: [appointment]
      parameters:
        - name: medic_id
          in: query
          required: false
          schema:
            type: integer
        - name: patient_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: "#/components/schemas/appointment"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"
  /appointment/available_times:
    get:
      summary: "List medic available times"
      tags: [appointment]
      parameters:
        - name: medic_id
          in: query
          required: true
          schema:
            type: integer
        - name: date
          in: query
          required: true
          schema:
            type: string
            description: "ISO encoded date"
            example: "2021-03-18"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/response"]
                properties:
                  available_times:
                    type: array
                    items:
                      $ref: "#/components/schemas/isoDatetime"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failResponse"